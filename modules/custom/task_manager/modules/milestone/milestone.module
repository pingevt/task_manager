<?php

/**
 * @file
 * Contains milestone.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_help().
 */
function milestone_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the milestone module.
    case 'help.page.milestone':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function milestone_theme() {
  $theme = [];
  $theme['milestone'] = [
    'render element' => 'elements',
    'file' => 'milestone.page.inc',
    'template' => 'milestone',
  ];
  $theme['milestone_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'milestone.page.inc',
  ];
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function milestone_theme_suggestions_milestone(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#milestone'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'milestone__' . $sanitized_view_mode;
  $suggestions[] = 'milestone__' . $entity->bundle();
  $suggestions[] = 'milestone__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'milestone__' . $entity->id();
  $suggestions[] = 'milestone__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}


function milestone_entity_base_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  /*
  if ($entity_type->id() == 'task') {
    $fields['milestone_id'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Milestone'))
      ->setName(t('Milestone'))
      ->setDescription(t('The Milestone ID the Task entity belongs to.'))
      ->setRevisionable(TRUE)
      ->setSetting('target_type', 'milestone')
      ->setSetting('handler', 'default')
      ->setTranslatable(TRUE)
      ->setDisplayOptions('view', array(
        'label' => 'hidden',
        'type' => 'milestone',
        'weight' => 0,
      ))
      ->setDisplayOptions('form', array(
        'type' => 'entity_reference_autocomplete',
        'weight' => 5,
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'size' => '60',
          'autocomplete_type' => 'tags',
          'placeholder' => '',
        ),
      ))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);

  }
  */
}
